{"ast":null,"code":"var _jsxFileName = \"/Users/hishamraihan/Desktop/ReactPractice2022/Section10SideEffectsReducersContentAPI/01-starting-project/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Login from './components/Login/Login';\nimport Home from './components/Home/Home';\nimport MainHeader from './components/MainHeader/MainHeader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // is re executed by react automatically when the state changes \n  const [isLoggedIn, setIsLoggedIn] = useState(false); // executed by react, and after every component reEvaluation\n  // would only run once when the app runs\n  // handles side effects, arg 1 is function that should be executed\n  // data fetching is ran as a side effect to avoid a loop\n\n  useEffect(() => {\n    const storedUserLoggedInInformation = localStorage.getItem('isLoggedIn'); // if the user loggerd in is = 1 then well set the user to logged IN\n\n    if (storedUserLoggedInInformation === '1') {\n      // even without loginHandler being triggered\n      // update the state\n      setIsLoggedIn(true);\n    } // arrary of dependencies\n\n  }, []); // since our dependecies didnt change it is only loaded once hence user is still logged in\n\n  const loginHandler = (email, password) => {\n    // We should of course check email and password\n    // But it's just a dummy/ demo anyways\n    // in applications on browser we see the key value pair\n    localStorage.setItem('isLoggedIn', '1');\n    setIsLoggedIn(true);\n  };\n\n  const logoutHandler = () => {\n    // when logging out we will remove this item and set it to false\n    localStorage.removeItem('isLoggedIn');\n    setIsLoggedIn(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(MainHeader, {\n      isAuthenticated: isLoggedIn,\n      onLogout: logoutHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [!isLoggedIn && /*#__PURE__*/_jsxDEV(Login, {\n        onLogin: loginHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 25\n      }, this), isLoggedIn && /*#__PURE__*/_jsxDEV(Home, {\n        onLogout: logoutHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 24\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"fKLMlyFH2GMrhNeUDpp+0z1yiCo=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/hishamraihan/Desktop/ReactPractice2022/Section10SideEffectsReducersContentAPI/01-starting-project/src/App.js"],"names":["React","useState","useEffect","Login","Home","MainHeader","App","isLoggedIn","setIsLoggedIn","storedUserLoggedInInformation","localStorage","getItem","loginHandler","email","password","setItem","logoutHandler","removeItem"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AAEA,OAAOC,KAAP,MAAkB,0BAAlB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,UAAP,MAAuB,oCAAvB;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACf;AAEE,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BP,QAAQ,CAAC,KAAD,CAA5C,CAHa,CAIb;AACA;AACA;AACA;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMO,6BAA6B,GAAGC,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAtC,CADc,CAEd;;AACA,QAAIF,6BAA6B,KAAK,GAAtC,EAA2C;AACzC;AACA;AACAD,MAAAA,aAAa,CAAC,IAAD,CAAb;AACD,KAPa,CAQd;;AACD,GATQ,EASN,EATM,CAAT,CARa,CAiBN;;AAEP,QAAMI,YAAY,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AACxC;AACA;AACA;AACAJ,IAAAA,YAAY,CAACK,OAAb,CAAqB,YAArB,EAAmC,GAAnC;AACAP,IAAAA,aAAa,CAAC,IAAD,CAAb;AACD,GAND;;AAQA,QAAMQ,aAAa,GAAG,MAAM;AAC1B;AACAN,IAAAA,YAAY,CAACO,UAAb,CAAwB,YAAxB;AACAT,IAAAA,aAAa,CAAC,KAAD,CAAb;AACD,GAJD;;AAMA,sBACE,QAAC,KAAD,CAAO,QAAP;AAAA,4BACE,QAAC,UAAD;AAAY,MAAA,eAAe,EAAED,UAA7B;AAAyC,MAAA,QAAQ,EAAES;AAAnD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,iBACG,CAACT,UAAD,iBAAe,QAAC,KAAD;AAAO,QAAA,OAAO,EAAEK;AAAhB;AAAA;AAAA;AAAA;AAAA,cADlB,EAEGL,UAAU,iBAAI,QAAC,IAAD;AAAM,QAAA,QAAQ,EAAES;AAAhB;AAAA;AAAA;AAAA;AAAA,cAFjB;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAUD;;GA3CQV,G;;KAAAA,G;AA6CT,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nimport Login from './components/Login/Login';\nimport Home from './components/Home/Home';\nimport MainHeader from './components/MainHeader/MainHeader';\n\nfunction App() {\n// is re executed by react automatically when the state changes \n\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  // executed by react, and after every component reEvaluation\n  // would only run once when the app runs\n  // handles side effects, arg 1 is function that should be executed\n  // data fetching is ran as a side effect to avoid a loop\n  useEffect(() => {\n    const storedUserLoggedInInformation = localStorage.getItem('isLoggedIn')\n    // if the user loggerd in is = 1 then well set the user to logged IN\n    if (storedUserLoggedInInformation === '1') {\n      // even without loginHandler being triggered\n      // update the state\n      setIsLoggedIn(true)\n    }\n    // arrary of dependencies\n  }, []) // since our dependecies didnt change it is only loaded once hence user is still logged in\n\n  const loginHandler = (email, password) => {\n    // We should of course check email and password\n    // But it's just a dummy/ demo anyways\n    // in applications on browser we see the key value pair\n    localStorage.setItem('isLoggedIn', '1')\n    setIsLoggedIn(true);\n  };\n\n  const logoutHandler = () => {\n    // when logging out we will remove this item and set it to false\n    localStorage.removeItem('isLoggedIn')\n    setIsLoggedIn(false);\n  };\n\n  return (\n    <React.Fragment>\n      <MainHeader isAuthenticated={isLoggedIn} onLogout={logoutHandler} />\n      <main>\n        {!isLoggedIn && <Login onLogin={loginHandler} />}\n        {isLoggedIn && <Home onLogout={logoutHandler} />}\n      </main>\n    </React.Fragment>\n\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}