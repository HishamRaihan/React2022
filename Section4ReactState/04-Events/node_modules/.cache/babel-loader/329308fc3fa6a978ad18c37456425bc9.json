{"ast":null,"code":"var _jsxFileName = \"/Volumes/Heshows1TB/React Practice/Section4ReactState/04-Events/src/components/NewExpense/ExpenseForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport './ExpenseForm.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ExpenseForm = () => {\n  _s();\n\n  // const [enteredTitle, setEnteredTitle] = useState('')\n  // const [enteredAmount, setEnteredAmount] = useState('')\n  // const [enteredDate, setEnteredDate] = useState('')\n  // when we go with this approach then all three states need to be updated at once and not just one\n  const [userInput, setUserInput] = useState({\n    enteredTitle: '',\n    enteredAmount: '',\n    enteredDate: ''\n  });\n\n  const titleChangeHandler = event => {\n    event.preventDefault();\n    setUserInput({ // override entereTitle, takes an object removes all the key value pairs\n      // adds them to this new object so when we do this this the other key value pairs\n      // are not thrown away\n      ...userInput,\n      enteredTitle: event.target.value\n    });\n  };\n\n  const amountChangeHandler = event => {\n    event.preventDefault();\n    setUserInput({ // depending on previous state to cpoy in the existing values then override a value with a new one\n      ...userInput,\n      enteredAmount: event.target.value\n    });\n  };\n\n  const dateChangeHandler = event => {\n    event.preventDefault();\n    setUserInput({ ...userInput,\n      enteredDate: event.target.value\n    });\n  }; // const titleChangeHandler = (event) => {\n  //   event.preventDefault()\n  //   // event.target.value -> we get the current value that we are inputing\n  //   setEnteredTitle(event.target.value);\n  //   // storing it into the setEnteredTitle variable\n  // }\n  // const amountChangeHandler =(event) =>{\n  //   event.preventDefault()\n  //   setEnteredAmount(event.target.value)\n  //   console.log(event);\n  // }\n  // const dateChangeHandler =(event) =>{\n  //   event.preventDefault()\n  //   setEnteredDate(event.target.value)\n  // }\n\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          onChange: titleChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Amount\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          min: \"0.01\",\n          step: \"0.01\",\n          onChange: amountChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          min: \"2019-01-01\",\n          max: \"2023-12-31\",\n          onChange: dateChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__actions\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Add Expense\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 10\n  }, this);\n};\n\n_s(ExpenseForm, \"6Cuqlx60GXUm10dGQahmbpx65q8=\");\n\n_c = ExpenseForm;\nexport default ExpenseForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ExpenseForm\");","map":{"version":3,"sources":["/Volumes/Heshows1TB/React Practice/Section4ReactState/04-Events/src/components/NewExpense/ExpenseForm.js"],"names":["React","useState","ExpenseForm","userInput","setUserInput","enteredTitle","enteredAmount","enteredDate","titleChangeHandler","event","preventDefault","target","value","amountChangeHandler","dateChangeHandler"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,mBAAP;;;AAEA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AACxB;AACA;AACA;AAEA;AACF,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BH,QAAQ,CAAC;AACzCI,IAAAA,YAAY,EAAE,EAD2B;AAEzCC,IAAAA,aAAa,EAAE,EAF0B;AAGzCC,IAAAA,WAAW,EAAE;AAH4B,GAAD,CAA1C;;AAKA,QAAMC,kBAAkB,GAAIC,KAAD,IAAU;AACnCA,IAAAA,KAAK,CAACC,cAAN;AACAN,IAAAA,YAAY,CAAC,EACX;AACA;AACA;AACA,SAAGD,SAJQ;AAKXE,MAAAA,YAAY,EAAEI,KAAK,CAACE,MAAN,CAAaC;AALhB,KAAD,CAAZ;AAOD,GATD;;AAUA,QAAMC,mBAAmB,GAAGJ,KAAD,IAAS;AAClCA,IAAAA,KAAK,CAACC,cAAN;AACAN,IAAAA,YAAY,CAAC,EACX;AACA,SAAGD,SAFQ;AAGXG,MAAAA,aAAa,EAAEG,KAAK,CAACE,MAAN,CAAaC;AAHjB,KAAD,CAAZ;AAKD,GAPD;;AAQA,QAAME,iBAAiB,GAAGL,KAAD,IAAS;AAChCA,IAAAA,KAAK,CAACC,cAAN;AACAN,IAAAA,YAAY,CAAC,EACX,GAAGD,SADQ;AAEXI,MAAAA,WAAW,EAAEE,KAAK,CAACE,MAAN,CAAaC;AAFf,KAAD,CAAZ;AAID,GAND,CA7B0B,CAoCxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;AAEA,sBAAO;AAAA,2BACL;AAAK,MAAA,SAAS,EAAC,uBAAf;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,sBAAf;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAO,UAAA,IAAI,EAAC,MAAZ;AAAmB,UAAA,QAAQ,EAAEJ;AAA7B;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAKE;AAAK,QAAA,SAAS,EAAC,sBAAf;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAO,UAAA,IAAI,EAAC,MAAZ;AAAmB,UAAA,GAAG,EAAC,MAAvB;AAA8B,UAAA,IAAI,EAAC,MAAnC;AAA0C,UAAA,QAAQ,EAAEK;AAApD;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cALF,eASE;AAAK,QAAA,SAAS,EAAC,sBAAf;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAO,UAAA,IAAI,EAAC,MAAZ;AAAmB,UAAA,GAAG,EAAC,YAAvB;AAAoC,UAAA,GAAG,EAAC,YAAxC;AAAqD,UAAA,QAAQ,EAAEC;AAA/D;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cATF,eAaE;AAAK,QAAA,SAAS,EAAC,sBAAf;AAAA,+BACE;AAAQ,UAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAbF;AAAA;AAAA;AAAA;AAAA;AAAA;AADK;AAAA;AAAA;AAAA;AAAA,UAAP;AAmBD,CAxED;;GAAMZ,W;;KAAAA,W;AA0EN,eAAeA,WAAf","sourcesContent":["import React, { useState } from \"react\";\nimport './ExpenseForm.css';\n\nconst ExpenseForm = () => {\n  // const [enteredTitle, setEnteredTitle] = useState('')\n  // const [enteredAmount, setEnteredAmount] = useState('')\n  // const [enteredDate, setEnteredDate] = useState('')\n\n  // when we go with this approach then all three states need to be updated at once and not just one\nconst [userInput, setUserInput] = useState({\n  enteredTitle :'',\n  enteredAmount: '',\n  enteredDate: ''\n})\nconst titleChangeHandler = (event) =>{\n  event.preventDefault()\n  setUserInput({\n    // override entereTitle, takes an object removes all the key value pairs\n    // adds them to this new object so when we do this this the other key value pairs\n    // are not thrown away\n    ...userInput,\n    enteredTitle: event.target.value\n  })\n}\nconst amountChangeHandler =(event)=>{\n  event.preventDefault()\n  setUserInput({\n    // depending on previous state to cpoy in the existing values then override a value with a new one\n    ...userInput,\n    enteredAmount: event.target.value\n  })\n}\nconst dateChangeHandler =(event)=>{\n  event.preventDefault()\n  setUserInput({\n    ...userInput,\n    enteredDate: event.target.value\n  })\n}\n  // const titleChangeHandler = (event) => {\n  //   event.preventDefault()\n  //   // event.target.value -> we get the current value that we are inputing\n  //   setEnteredTitle(event.target.value);\n  //   // storing it into the setEnteredTitle variable\n  // }\n  // const amountChangeHandler =(event) =>{\n  //   event.preventDefault()\n  //   setEnteredAmount(event.target.value)\n  //   console.log(event);\n\n  // }\n  // const dateChangeHandler =(event) =>{\n  //   event.preventDefault()\n  //   setEnteredDate(event.target.value)\n  // }\n\n  return <form>\n    <div className=\"new-expense__controls\">\n      <div className=\"new-expense__control\">\n        <label>Title</label>\n        <input type=\"text\" onChange={titleChangeHandler} />\n      </div>\n      <div className=\"new-expense__control\">\n        <label>Amount</label>\n        <input type=\"text\" min='0.01' step='0.01' onChange={amountChangeHandler} />\n      </div>\n      <div className=\"new-expense__control\">\n        <label>Date</label>\n        <input type=\"date\" min='2019-01-01' max='2023-12-31' onChange={dateChangeHandler} />\n      </div>\n      <div className=\"new-expense__actions\">\n        <button type=\"submit\">Add Expense</button>\n      </div>\n    </div >\n  </form>\n}\n\nexport default ExpenseForm"]},"metadata":{},"sourceType":"module"}