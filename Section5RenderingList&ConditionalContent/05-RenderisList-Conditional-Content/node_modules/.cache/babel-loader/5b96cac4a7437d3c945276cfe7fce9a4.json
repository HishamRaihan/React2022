{"ast":null,"code":"var _jsxFileName = \"/Volumes/Heshows1TB/React Practice/Section5RenderingList&ConditionalContent/05-RenderisList-Conditional-Content/src/components/NewExpense/ExpenseForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport './ExpenseForm.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ExpenseForm = props => {\n  _s();\n\n  const [enteredTitle, setEnteredTitle] = useState('');\n  const [enteredAmount, setEnteredAmount] = useState('');\n  const [enteredDate, setEnteredDate] = useState(''); //   // when we go with this approach then all three states need to be updated at once and not just one\n  // const [userInput, setUserInput] = useState({\n  //   enteredTitle :'',\n  //   enteredAmount: '',\n  //   enteredDate: ''\n  // })\n  // const titleChangeHandler = (event) =>{\n  //   event.preventDefault()\n  //   // depending on previous state to cpoy in the existing values then override a value with a new one\n  //   // when ever you update state when depending on the previous state we need to use an alternate form of that funciton\n  //   setUserInput((prevState) => {\n  //     return { ...prevState, enteredTitle: event.target.value }\n  //   })\n  // }\n  // const amountChangeHandler =(event)=>{\n  //   event.preventDefault()\n  // //  this allows for it to always be on the updated state\n  //     setUserInput((prevState) =>{\n  // return {...prevState, enteredAmount: event.target.value}\n  //     })\n  // }\n  // const dateChangeHandler =(event)=>{\n  //   event.preventDefault()\n  //   setUserInput((prevState) => {\n  //     return { ...prevState, enteredDate: event.target.value }\n  //   })\n  // }\n\n  const titleChangeHandler = event => {\n    // event.target.value -> we get the current value that we are inputing\n    setEnteredTitle(event.target.value); // storing it into the setEnteredTitle variable\n  };\n\n  const amountChangeHandler = event => {\n    setEnteredAmount(event.target.value);\n    console.log(event);\n  };\n\n  const dateChangeHandler = event => {\n    setEnteredDate(event.target.value);\n  }; // function that will have all the enteredData and passed to the form for update\n\n\n  const submitHandler = event => {\n    event.preventDefault();\n    const expenseData = {\n      title: enteredTitle,\n      amount: enteredAmount,\n      date: new Date(enteredDate)\n    }; // two way binding adding value to the input element\n    // feed the state back to the input so that when change the state we also change the input\n    // allows to gather user input then change it\n\n    props.onSaveExpenseData(expenseData); // this will clear the values we have in the form after submitting\n    // tied to values on each input\n\n    setEnteredTitle('');\n    setEnteredAmount('');\n    setEnteredDate('');\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: submitHandler,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: enteredTitle,\n          onChange: titleChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Amount\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          min: \"0.01\",\n          step: \"0.01\",\n          value: enteredAmount,\n          onChange: amountChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          min: \"1989-01-01\",\n          max: \"2024-12-31\",\n          value: enteredDate,\n          onChange: dateChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__actions\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Add Expense\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 10\n  }, this);\n};\n\n_s(ExpenseForm, \"/TSOglz5ZV3C6oWQkp/FZ+OWqo4=\");\n\n_c = ExpenseForm;\nexport default ExpenseForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ExpenseForm\");","map":{"version":3,"sources":["/Volumes/Heshows1TB/React Practice/Section5RenderingList&ConditionalContent/05-RenderisList-Conditional-Content/src/components/NewExpense/ExpenseForm.js"],"names":["React","useState","ExpenseForm","props","enteredTitle","setEnteredTitle","enteredAmount","setEnteredAmount","enteredDate","setEnteredDate","titleChangeHandler","event","target","value","amountChangeHandler","console","log","dateChangeHandler","submitHandler","preventDefault","expenseData","title","amount","date","Date","onSaveExpenseData"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport './ExpenseForm.css';\n\nconst ExpenseForm = (props) => {\n  const [enteredTitle, setEnteredTitle] = useState('')\n  const [enteredAmount, setEnteredAmount] = useState('')\n  const [enteredDate, setEnteredDate] = useState('')\n\n  //   // when we go with this approach then all three states need to be updated at once and not just one\n  // const [userInput, setUserInput] = useState({\n  //   enteredTitle :'',\n  //   enteredAmount: '',\n  //   enteredDate: ''\n  // })\n  // const titleChangeHandler = (event) =>{\n  //   event.preventDefault()\n  //   // depending on previous state to cpoy in the existing values then override a value with a new one\n  //   // when ever you update state when depending on the previous state we need to use an alternate form of that funciton\n  //   setUserInput((prevState) => {\n  //     return { ...prevState, enteredTitle: event.target.value }\n  //   })\n\n  // }\n  // const amountChangeHandler =(event)=>{\n  //   event.preventDefault()\n  // //  this allows for it to always be on the updated state\n  //     setUserInput((prevState) =>{\n  // return {...prevState, enteredAmount: event.target.value}\n  //     })\n\n  // }\n  // const dateChangeHandler =(event)=>{\n  //   event.preventDefault()\n\n  //   setUserInput((prevState) => {\n  //     return { ...prevState, enteredDate: event.target.value }\n  //   })\n\n  // }\n  const titleChangeHandler = (event) => {\n    // event.target.value -> we get the current value that we are inputing\n    setEnteredTitle(event.target.value);\n    // storing it into the setEnteredTitle variable\n  }\n  const amountChangeHandler = (event) => {\n    setEnteredAmount(event.target.value)\n    console.log(event);\n\n  }\n  const dateChangeHandler = (event) => {\n    setEnteredDate(event.target.value)\n  }\n\n  // function that will have all the enteredData and passed to the form for update\n  const submitHandler = (event) => {\n    event.preventDefault()\n    const expenseData ={\n      title: enteredTitle,\n      amount: enteredAmount,\n      date: new Date(enteredDate)\n    }\n    // two way binding adding value to the input element\n    // feed the state back to the input so that when change the state we also change the input\n    // allows to gather user input then change it\n    props.onSaveExpenseData(expenseData)\n    // this will clear the values we have in the form after submitting\n    // tied to values on each input\n    setEnteredTitle('')\n    setEnteredAmount('')\n    setEnteredDate('')\n  }\n\n  return <form onSubmit={submitHandler}>\n    <div className=\"new-expense__controls\">\n      <div className=\"new-expense__control\">\n        <label>Title</label>\n        <input type=\"text\" value={enteredTitle} onChange={titleChangeHandler} />\n      </div>\n      <div className=\"new-expense__control\">\n        <label>Amount</label>\n        <input type=\"text\" min='0.01' step='0.01' value={enteredAmount} onChange={amountChangeHandler} />\n      </div>\n      <div className=\"new-expense__control\">\n        <label>Date</label>\n        <input type=\"date\" min='1989-01-01' max='2024-12-31' value={enteredDate} onChange={dateChangeHandler} />\n      </div>\n      <div className=\"new-expense__actions\">\n        <button >Cancel</button>\n        <button type=\"submit\">Add Expense</button>\n      </div>\n    </div >\n  </form>\n}\n\nexport default ExpenseForm"]},"metadata":{},"sourceType":"module"}