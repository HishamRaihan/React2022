{"ast":null,"code":"var _jsxFileName = \"/Users/hishamraihan/Desktop/ReactPractice2022/Section9Fragments/08-finished/src/components/Users/AddUser.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState } from 'react';\nimport Card from '../UI/Card';\nimport Button from '../UI/Button';\nimport ErrorModal from '../UI/ErrorModal';\nimport classes from './AddUser.module.css';\nimport Wrapper from '../Helpers/Wrapper';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AddUser = props => {\n  _s();\n\n  // refs allow us to get access to other dom elements and work this them\n  // use ref takes a default value and returns a value that we can work with\n  const nameInputRef = useRef();\n  const ageInputRef = useRef();\n  const [enteredUsername, setEnteredUsername] = useState('');\n  const [enteredAge, setEnteredAge] = useState('');\n  const [error, setError] = useState();\n\n  const addUserHandler = event => {\n    event.preventDefault();\n    console.log(nameInputRef);\n\n    if (enteredUsername.trim().length === 0 || enteredAge.trim().length === 0) {\n      setError({\n        title: 'Invalid input',\n        message: 'Please enter a valid name and age (non-empty values).'\n      });\n      return;\n    }\n\n    if (+enteredAge < 1) {\n      setError({\n        title: 'Invalid age',\n        message: 'Please enter a valid age (> 0).'\n      });\n      return;\n    }\n\n    props.onAddUser(enteredUsername, enteredAge);\n    setEnteredUsername('');\n    setEnteredAge('');\n  };\n\n  const usernameChangeHandler = event => {\n    setEnteredUsername(event.target.value);\n  };\n\n  const ageChangeHandler = event => {\n    setEnteredAge(event.target.value);\n  };\n\n  const errorHandler = () => {\n    setError(null);\n  };\n\n  return (\n    /*#__PURE__*/\n    // only one value can be returned so we wrap eveything in one element i.e <div>\n    // wrapping adjacent elements with a div is the work around\n    // wrapper doesnt render anything but it is the root element that we are returning with adjacent elements inside\n    _jsxDEV(Wrapper, {\n      children: [error && /*#__PURE__*/_jsxDEV(ErrorModal, {\n        title: error.title,\n        message: error.message,\n        onConfirm: errorHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Card, {\n        className: classes.input,\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: addUserHandler,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"username\",\n            children: \"Username\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"username\",\n            type: \"text\",\n            value: enteredUsername,\n            onChange: usernameChangeHandler // can connect any html element to our refs\n            ,\n            ref: nameInputRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"age\",\n            children: \"Age (Years)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"age\",\n            type: \"number\",\n            value: enteredAge,\n            onChange: ageChangeHandler,\n            ref: ageInputRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            children: \"Add User\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }, this)\n  );\n};\n\n_s(AddUser, \"U9tAPrPzq0ATqLCQlFPOYIvOVxY=\");\n\n_c = AddUser;\nexport default AddUser;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddUser\");","map":{"version":3,"sources":["/Users/hishamraihan/Desktop/ReactPractice2022/Section9Fragments/08-finished/src/components/Users/AddUser.js"],"names":["React","useRef","useState","Card","Button","ErrorModal","classes","Wrapper","AddUser","props","nameInputRef","ageInputRef","enteredUsername","setEnteredUsername","enteredAge","setEnteredAge","error","setError","addUserHandler","event","preventDefault","console","log","trim","length","title","message","onAddUser","usernameChangeHandler","target","value","ageChangeHandler","errorHandler","input"],"mappings":"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","sourcesContent":["import React, { useRef, useState } from 'react';\n\nimport Card from '../UI/Card';\nimport Button from '../UI/Button';\nimport ErrorModal from '../UI/ErrorModal';\nimport classes from './AddUser.module.css';\nimport Wrapper from '../Helpers/Wrapper';\n\n\nconst AddUser = (props) => {\n  // refs allow us to get access to other dom elements and work this them\n  // use ref takes a default value and returns a value that we can work with\n  const nameInputRef = useRef()\n  const ageInputRef = useRef()\n\n  const [enteredUsername, setEnteredUsername] = useState('');\n  const [enteredAge, setEnteredAge] = useState('');\n  const [error, setError] = useState();\n\n  const addUserHandler = (event) => {\n    event.preventDefault();\n    console.log(nameInputRef);\n    if (enteredUsername.trim().length === 0 || enteredAge.trim().length === 0) {\n      setError({\n        title: 'Invalid input',\n        message: 'Please enter a valid name and age (non-empty values).',\n      });\n      return;\n    }\n    if (+enteredAge < 1) {\n      setError({\n        title: 'Invalid age',\n        message: 'Please enter a valid age (> 0).',\n      });\n      return;\n    }\n    props.onAddUser(enteredUsername, enteredAge);\n    setEnteredUsername('');\n    setEnteredAge('');\n  };\n\n  const usernameChangeHandler = (event) => {\n    setEnteredUsername(event.target.value);\n  };\n\n  const ageChangeHandler = (event) => {\n    setEnteredAge(event.target.value);\n  };\n\n  const errorHandler = () => {\n    setError(null);\n  };\n\n  return (\n    // only one value can be returned so we wrap eveything in one element i.e <div>\n    // wrapping adjacent elements with a div is the work around\n    // wrapper doesnt render anything but it is the root element that we are returning with adjacent elements inside\n    <Wrapper>\n      {error && (\n        <ErrorModal\n          title={error.title}\n          message={error.message}\n          onConfirm={errorHandler}\n        />\n      )}\n      <Card className={classes.input}>\n        <form onSubmit={addUserHandler}>\n          <label htmlFor=\"username\">Username</label>\n          <input\n            id=\"username\"\n            type=\"text\"\n            value={enteredUsername}\n            onChange={usernameChangeHandler}\n            // can connect any html element to our refs\n            ref={nameInputRef}\n          />\n          <label htmlFor=\"age\">Age (Years)</label>\n          <input\n            id=\"age\"\n            type=\"number\"\n            value={enteredAge}\n            onChange={ageChangeHandler}\n            ref={ageInputRef}\n          />\n          <Button type=\"submit\">Add User</Button>\n        </form>\n      </Card>\n    </Wrapper>\n  );\n};\n\nexport default AddUser;\n"]},"metadata":{},"sourceType":"module"}