{"ast":null,"code":"var _jsxFileName = \"/Users/hishamraihan/Desktop/ReactPractice2022/Secttion8CompleteProject/01-starting-project/src/components/Users/AddUser.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Button from \"../UI/Button\";\nimport Card from \"../UI/Card\";\nimport classes from './AddUser.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AddUser = props => {\n  _s();\n\n  // array destructering because useState uses an array with two elements\n  const [enteredUsername, setEnteredUsername] = useState('');\n  const [enteredAge, setEnteredAge] = useState(''); // want to render something on the screen that allows user to\n  // enter a name, age and a button to confirm\n  // first element of the returned array is the current snapshot and everytime the component re-renders when it updates then that will hold the latest, set holds the funtion\n\n  const addUserHandler = event => {\n    event.preventDefault(); // validating the input\n\n    if (enteredUsername.trim().length === 0 || enteredAge.trim().length === 0) {\n      return;\n    } // force converts the string into a number\n\n\n    if (+enteredAge < 1) {\n      return;\n    } // forwarding the pieces of data to the App component on every click on the Add User Btn\n\n\n    props.onAddUser(enteredUsername, enteredAge);\n    setEnteredUsername('');\n    setEnteredAge('');\n    console.log(enteredUsername, enteredAge);\n  };\n\n  const userNameChangeHandler = event => {\n    // bind to userName input\n    setEnteredUsername(event.target.value); // setting to what the user currently entered target being the input and value is what the currently entered value\n  };\n\n  const ageNameChangeHandler = event => {\n    setEnteredAge(event.target.value);\n  };\n\n  return (\n    /*#__PURE__*/\n    // card is our own \n    _jsxDEV(Card, {\n      className: classes.input,\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: addUserHandler,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"username\",\n          children: \"Username\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"username\",\n          value: enteredUsername,\n          onChange: userNameChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"age\",\n          children: \"Age (Years)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          id: \"age\",\n          value: enteredAge,\n          onChange: ageNameChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          children: \"Add User\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }, this)\n  );\n};\n\n_s(AddUser, \"KlB6dcQFtu+2S16p6cjD6Kz8DMs=\");\n\n_c = AddUser;\nexport default AddUser;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddUser\");","map":{"version":3,"sources":["/Users/hishamraihan/Desktop/ReactPractice2022/Secttion8CompleteProject/01-starting-project/src/components/Users/AddUser.js"],"names":["React","useState","Button","Card","classes","AddUser","props","enteredUsername","setEnteredUsername","enteredAge","setEnteredAge","addUserHandler","event","preventDefault","trim","length","onAddUser","console","log","userNameChangeHandler","target","value","ageNameChangeHandler","input"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,OAAOC,OAAP,MAAoB,sBAApB;;;AAEA,MAAMC,OAAO,GAAGC,KAAK,IAAI;AAAA;;AACzB;AACE,QAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCP,QAAQ,CAAC,EAAD,CAAtD;AACA,QAAM,CAACQ,UAAD,EAAaC,aAAb,IAA8BT,QAAQ,CAAC,EAAD,CAA5C,CAHuB,CAIvB;AACA;AACA;;AAEA,QAAMU,cAAc,GAAIC,KAAD,IAAW;AAChCA,IAAAA,KAAK,CAACC,cAAN,GADgC,CAEhC;;AACA,QAAGN,eAAe,CAACO,IAAhB,GAAuBC,MAAvB,KAAkC,CAAlC,IAAuCN,UAAU,CAACK,IAAX,GAAkBC,MAAlB,KAA6B,CAAvE,EAAyE;AACvE;AACD,KAL+B,CAMhC;;;AACA,QAAG,CAACN,UAAD,GAAa,CAAhB,EAAkB;AAChB;AACD,KAT+B,CAUhC;;;AACAH,IAAAA,KAAK,CAACU,SAAN,CAAgBT,eAAhB,EAAiCE,UAAjC;AACAD,IAAAA,kBAAkB,CAAC,EAAD,CAAlB;AACAE,IAAAA,aAAa,CAAC,EAAD,CAAb;AACJO,IAAAA,OAAO,CAACC,GAAR,CAAYX,eAAZ,EAA6BE,UAA7B;AACG,GAfD;;AAgBA,QAAMU,qBAAqB,GAAGP,KAAK,IAAI;AACrC;AACAJ,IAAAA,kBAAkB,CAACI,KAAK,CAACQ,MAAN,CAAaC,KAAd,CAAlB,CAFqC,CAGrC;AACD,GAJD;;AAKA,QAAMC,oBAAoB,GAAGV,KAAK,IAAI;AACpCF,IAAAA,aAAa,CAACE,KAAK,CAACQ,MAAN,CAAaC,KAAd,CAAb;AACD,GAFD;;AAIA;AAAA;AACE;AACA,YAAC,IAAD;AAAM,MAAA,SAAS,EAAEjB,OAAO,CAACmB,KAAzB;AAAA,6BAEE;AAAM,QAAA,QAAQ,EAAEZ,cAAhB;AAAA,gCAEE;AAAO,UAAA,OAAO,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE;AAAO,UAAA,IAAI,EAAC,MAAZ;AAAmB,UAAA,EAAE,EAAC,UAAtB;AAAiC,UAAA,KAAK,EAAEJ,eAAxC;AACE,UAAA,QAAQ,EAAEY;AADZ;AAAA;AAAA;AAAA;AAAA,gBAHF,eAKE;AAAO,UAAA,OAAO,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBALF,eAOE;AAAO,UAAA,IAAI,EAAC,QAAZ;AAAqB,UAAA,EAAE,EAAC,KAAxB;AAA8B,UAAA,KAAK,EAAEV,UAArC;AACE,UAAA,QAAQ,EAAEa;AADZ;AAAA;AAAA;AAAA;AAAA,gBAPF,eAUE,QAAC,MAAD;AAAQ,UAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAVF;AAAA;AAAA;AAAA;AAAA;AAAA;AAFF;AAAA;AAAA;AAAA;AAAA;AAFF;AAkBD,CAnDD;;GAAMjB,O;;KAAAA,O;AAqDN,eAAeA,OAAf","sourcesContent":["import React, { useState } from \"react\";\nimport Button from \"../UI/Button\";\nimport Card from \"../UI/Card\";\nimport classes from './AddUser.module.css'\n\nconst AddUser = props => {\n// array destructering because useState uses an array with two elements\n  const [enteredUsername, setEnteredUsername] = useState('');\n  const [enteredAge, setEnteredAge] = useState('');\n  // want to render something on the screen that allows user to\n  // enter a name, age and a button to confirm\n  // first element of the returned array is the current snapshot and everytime the component re-renders when it updates then that will hold the latest, set holds the funtion\n\n  const addUserHandler = (event) => {\n    event.preventDefault()\n    // validating the input\n    if(enteredUsername.trim().length === 0 || enteredAge.trim().length === 0){\n      return\n    }\n    // force converts the string into a number\n    if(+enteredAge <1){\n      return\n    }\n    // forwarding the pieces of data to the App component on every click on the Add User Btn\n    props.onAddUser(enteredUsername, enteredAge)\n    setEnteredUsername('')\n    setEnteredAge('')\nconsole.log(enteredUsername, enteredAge);\n  }\n  const userNameChangeHandler = event => {\n    // bind to userName input\n    setEnteredUsername(event.target.value)\n    // setting to what the user currently entered target being the input and value is what the currently entered value\n  }\n  const ageNameChangeHandler = event => {\n    setEnteredAge(event.target.value)\n  }\n\n  return (\n    // card is our own \n    <Card className={classes.input}>\n      {/* want to pass the pointer so when form is being submitted */}\n      <form onSubmit={addUserHandler}>\n        {/* jsx for attribute to a label */}\n        <label htmlFor=\"username\">Username</label>\n        <input type=\"text\" id=\"username\" value={enteredUsername}\n          onChange={userNameChangeHandler} />\n        <label htmlFor=\"age\">Age (Years)</label>\n         {/* value will be updated after submitted */}\n        <input type=\"number\" id=\"age\" value={enteredAge}\n          onChange={ageNameChangeHandler} />\n          {/*  */}\n        <Button type=\"submit\">Add User</Button>\n      </form>\n    </Card>\n  )\n}\n\nexport default AddUser"]},"metadata":{},"sourceType":"module"}